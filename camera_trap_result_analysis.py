# -*- coding: utf-8 -*-
"""camera_trap_result_analysis.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1jcKi_0iftX4kVVKUlPgsNqyT7-YIdLwh
"""

import pandas as pd

import matplotlib.pyplot as plt
import colorcet as cc
import seaborn as sns

df = pd.read_csv('class_label.csv', index_col=0)
df.head()

classes = df['gt_class'].unique()
print(classes)

cluster_count = df.groupby(['gt_class', 'cluster']).size().reset_index(name='count')
count = cluster_count.set_index(['gt_class'])

max_group = cluster_count[cluster_count.groupby('gt_class')['count'].transform(max) == cluster_count['count']]

max_group

max_group[['gt_class','cluster']].sort_values(by=['cluster'])
m = max_group[['gt_class','cluster']].sort_values(by=['cluster'])
m[(m['gt_class'] == 'dog') | (m['gt_class'] == 'cat')]

class_count = df.groupby(['gt_class', 'cluster']).size().reset_index(name='count')
max_class = class_count[class_count.groupby('cluster')['count'].transform(max) == cluster_count['count']]
m2 = max_class.sort_values(by=['cluster'])

res = pd.DataFrame(columns=['pred1', 'pred2'])
for i in range(len(classes)):
  res.loc[i, 'pred1'] = ', '.join(m2[m2['cluster'] == i]['gt_class'].values)
  res.loc[i, 'pred2'] = ', '.join(m[m['cluster'] == i]['gt_class'].values)
res.loc[15] = 'empty'
res.to_csv('label.csv')

for i in range(len(classes)):
  print(i, m[m['cluster'] == i]['gt_class'].values)

colors = sns.color_palette(cc.glasbey, len(classes) + 1)
palette = {p: color for p, color in zip(range(len(classes) + 1), colors)}

for c in classes:
  cat = count.loc[[c]].set_index(['cluster'])
  cat.plot.pie(y='count', figsize=(20,6), labels=None, colors=[palette[k] for k in cat.index.values], title=c+" (max = {})".format(cat.max().item()))

top1 = []
top2 = []

for c in classes:
  cat = count.loc[[c]].set_index(['cluster'])
  acc = cat.max().item() / cat.sum().item() * 100
  print("top1 {:10}".format(c), "{:.2f}".format(acc))
  top1.append(acc)
print("top1 average: {:.2f}".format(sum(top1)/len(top1)))

print()
for c in classes:
  cat = count.loc[[c]].set_index(['cluster'])
  acc = cat['count'].nlargest(2).sum() / cat.sum().item() * 100
  print("top2 {:10}".format(c), "{:.2f}".format(acc))
  top2.append(acc)
print("top2 average: {:.2f}".format(sum(top2)/len(top2)))